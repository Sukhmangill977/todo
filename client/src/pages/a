import React, { useState, useEffect, useRef } from "react";
import "./Dashboard.css";
import predefinedSuggestions from "../utils/taskSuggestions.js";

function Dashboard() {
  const token = localStorage.getItem("authToken");
  const decodedToken = JSON.parse(atob(token.split(".")[1]));
  const userId = decodedToken.id;
  const username = decodedToken.username || decodedToken.name || "User";
  const firstLetter = username.charAt(0).toUpperCase();

  const recognitionRef = useRef(null);
  const [suggestions, setSuggestions] = useState([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [quickNote, setQuickNote] = useState(() => localStorage.getItem("quickNote") || "");
  const [menuActive, setMenuActive] = useState(false);
  const [tasks, setTasks] = useState({ task: [], inProgress: [], complete: [] });
  const [newTask, setNewTask] = useState({ title: "", priority: "Medium", deadline: "" });
  const [editingTask, setEditingTask] = useState(null);

  const [userTask, setUserTask] = useState("");
  const [taskSteps, setTaskSteps] = useState("");

  const getTaskSteps = async () => {
    if (!userTask.trim()) return;
    try {
      const response = await fetch("http://localhost:5002/suggest-steps", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ task: userTask })
      });
      const data = await response.json();
      setTaskSteps(data.steps);
    } catch (error) {
      console.error("Error fetching steps:", error);
      setTaskSteps("❌ Failed to get suggestions.");
    }
  };

  const handleToggleMenu = () => setMenuActive(!menuActive);

  useEffect(() => {
    localStorage.setItem("quickNote", quickNote);
  }, [quickNote]);

  useEffect(() => {
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (SpeechRecognition) {
      const recognition = new SpeechRecognition();
      recognition.lang = "en-US";
      recognition.continuous = false;
      recognition.interimResults = false;

      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        if (editingTask) {
          setEditingTask((prev) => ({ ...prev, title: prev.title + " " + transcript }));
        } else {
          setNewTask((prev) => ({ ...prev, title: prev.title + " " + transcript }));
        }
      };

      recognition.onerror = (event) => console.error("Speech recognition error:", event.error);

      recognitionRef.current = recognition;
    }
  }, []);

  const startSpeechRecognition = () => {
    if (recognitionRef.current) {
      try {
        recognitionRef.current.start();
      } catch (e) {
        console.error("Speech recognition failed to start:", e);
      }
    }
  };

  useEffect(() => {
    const fetchTasks = async () => {
      try {
        const res = await fetch(`http://localhost:5001/api/tasks/${userId}`, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Content-Type": "application/json",
          },
        });

        if (!res.ok) throw new Error(await res.text());

        const data = await res.json();
        const grouped = { task: [], inProgress: [], complete: [] };
        data.forEach((t) => grouped[t.status]?.push(t));
        setTasks(grouped);
      } catch (error) {
        console.error("Error fetching tasks:", error);
      }
    };
    fetchTasks();
  }, []);

  const handleInputChange = (e) => {
    const value = e.target.value;
    const filtered = predefinedSuggestions.filter(s => s.toLowerCase().includes(value.toLowerCase()));
    setNewTask({ ...newTask, title: value });
    setSuggestions(filtered);
    setShowSuggestions(value.length > 0 && filtered.length > 0);
  };

  const selectSuggestion = (suggestion) => {
    setNewTask({ ...newTask, title: suggestion });
    setShowSuggestions(false);
  };

  const handleAddTask = async () => {
    if (newTask.title.trim() && newTask.deadline) {
      const payload = { ...newTask, status: "task", userId };
      const res = await fetch(`http://localhost:5001/api/tasks/newTask`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      });

      const saved = await res.json();
      setTasks((prev) => ({ ...prev, task: [...(prev.task || []), saved] }));
      setNewTask({ title: "", priority: "Medium", deadline: "" });
      setShowSuggestions(false);
    }
  };

  const handleMoveTask = async (taskId, targetStatus) => {
    const taskToUpdate = Object.values(tasks).flat().find(t => t._id === taskId);
    if (!taskToUpdate) return;

    const res = await fetch(`http://localhost:5001/api/tasks/${taskId}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ status: targetStatus }),
    });

    const updated = await res.json();
    const updatedTasks = { task: [], inProgress: [], complete: [] };
    Object.values(tasks).flat().forEach((t) => {
      if (t._id === taskId) updatedTasks[updated.status].push(updated);
      else updatedTasks[t.status].push(t);
    });
    setTasks(updatedTasks);
  };

  const handleDeleteTask = async (taskId) => {
    await fetch(`http://localhost:5001/api/tasks/${taskId}`, {
      method: "DELETE",
      headers: { Authorization: `Bearer ${token}` },
    });

    const updated = { task: [], inProgress: [], complete: [] };
    Object.values(tasks).flat().forEach((t) => {
      if (t._id !== taskId) updated[t.status].push(t);
    });
    setTasks(updated);
  };

  const startEditing = (task, section) => setEditingTask({ ...task, section });

  const handleUpdateTask = async () => {
    const res = await fetch(`http://localhost:5001/api/tasks/${editingTask._id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({
        title: editingTask.title,
        priority: editingTask.priority,
        deadline: editingTask.deadline,
      }),
    });

    const updated = await res.json();
    const updatedTasks = { task: [], inProgress: [], complete: [] };
    Object.values(tasks).flat().forEach((t) => {
      if (t._id === updated._id) updatedTasks[updated.status].push(updated);
      else updatedTasks[t.status].push(t);
    });
    setTasks(updatedTasks);
    setEditingTask(null);
  };

  useEffect(() => {
    const interval = setInterval(() => {
      const now = new Date().getTime();
      tasks.task.forEach((task) => {
        const deadline = new Date(task.deadline).getTime();
        if (deadline - now <= 86400000 && deadline > now) {
          alert(`Reminder: Task "${task.title}" is due tomorrow!`);
        }
      });
    }, 60000);
    return () => clearInterval(interval);
  }, [tasks]);

  return (
    <div className="dashboard">
      <h2>🧠 Task Dashboard</h2>
      {/* Add the UI part here like input fields, buttons, and rendering tasks */}
      {/* Input for AI suggestion */}
      <div>
        <input
          type="text"
          value={userTask}
          onChange={(e) => setUserTask(e.target.value)}
          placeholder="Enter your task..."
        />
        <button onClick={getTaskSteps}>Get Smart Steps</button>
        {taskSteps && <div className="suggestions">{taskSteps}</div>}
      </div>
    </div>
  );
}

export default Dashboard;